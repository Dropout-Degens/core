generator client {
    provider = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider     = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
    relationMode = "foreignKeys"
    schemas = ["private", "public"]
}


/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model coupon {
    @@schema("private")
    @@map ("coupons")

    associated_user BigInt?  @map("associated-user")
    user            user?    @relation(fields: [associated_user], references: [snowflake])

    /// The promo code string used for Whop
    ///
    /// Schema:
    ///    ${Snowflake}-${PseudoRandomFillTo40Chars}-${BillingPeriod}-${Duration}-${Amount}
    promo_code      String  @id @unique(map: "promo-code_UNIQUE") @map("promo-code") @db.VarChar(64)

    whop_id         String? @unique(map: "whop-id_UNIQUE") @map("whop-id") @db.VarChar(32)
    /// Stripe ID of the [Promotion Code](https://docs.stripe.com/api/promotion_codes) object
    ///
    /// Applied at checkout to show the promo cide to the user
    stripe_id       String? @unique(map: "stripe-id_UNIQUE") @map("stripe-id") @db.VarChar(32)

    discount_amount Float   @map("discount-amount") @db.Real
    duration        Int     @db.SmallInt
    billing_period  String  @map("billing-period")
    plan_type       Int     @map("plan-type")
    source          String?

    @@index([associated_user], map: "associated-user")
}

model PromotionalPrice {
    @@schema("private")

    id BigInt @id @default(autoincrement())

    promo_code String @unique

    active Boolean

    stripe_price String
    /// Free days! Free days! Get your free days here!
    free_days Int @db.SmallInt @default(0)
    /// If you wish to layer a coupon on top of the custom Stripe price, you can specify it here.
    coupon_id String?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
    @@schema("private")
    @@map ("users")

    snowflake                       BigInt  @id
    discord_email                   String? @map("discord-email") @db.Text
    discord_pfp                     String? @map("discord-pfp") @db.Text
    discord_name                    String? @map("discord-name") @db.Text

    discord_access_token            String? @map("discord-access-token")
    /// Expiration of the user's Discord access token, stored in Unix seconds
    discord_access_expiry           BigInt  @default(0) @map("discord-access-expiry")
    discord_refresh_token           String? @map("discord-refresh-token")

    timezone                        String  @default("America/New_York")
    /// When the user last adjusted their timezone, stored in Unix millis
    timezone_last_adjusted          BigInt  @default(0) @map("timezone-last-adjusted")
    weekly_reward_last_claimed      String  @default("December 31 1969 20:00 GMT-4") @map("weekly-reward-last-claimed")
    weekly_reward_streak            Int     @default(0) @map("weekly-reward-streak")
    weekly_reward_streak_last_best  Int     @default(0) @map("weekly-reward-streak-last-best")

    auth_sessions                   auth_session[]

    memberships                     membership[]
    /// Flattened subscription type. THIS IS A CACHE OF SORTS AND SHOULD BE UPDATED AFTER `memberships` IS MODIFIED!
    subscription_type               Int     @default(0) @map("subscription-type")


    /// Record<PurchasablePlan, Record<DiscountSource, number>>
    /// @type { Record<number, Record<string, number>> }
    free_days                       Json?
    coupons                         coupon[]


    stripe_customer_id              String? @db.VarChar(32)
    stripe_email                    String? @db.Text




    karma                           BigInt     @default(0)
    @@index([karma(sort: Desc)])

    // NOTE: When adding new caps, be sure to add them to the Daily Reset code in the bot!
    // src/web-server/routes/daily-reset.ts
    karma_today_from_messages       BigInt     @default(0)
    karma_today_from_reactions      BigInt     @default(0)


    email_marketing_consent         Boolean    @default(false)


    admin_created_memberships       membership[] @relation("manual_adder")

    votes                           votes[]

    hasJoinedDiscord                Boolean    @default(false)

    eligibleForStripeMigrationPrice Boolean   @default(false)

    // The user's bankroll in USD cents
    bankrollUSDCents                Int?
    bettingStrategy                 BETTING_STRATEGY @default(UNSET)

    giveawayEntries                 GiveawayEntriesForUser[]

    /// The decoded name of the join method the user last used to join the Discord server
    latestDiscordJoinMethod         String?
    /// The latest invite link the user used to join the Discord server
    latestDiscordJoinInviteCode     String?
    /// The username of the latest user/bot that allowed the user to join the Discord server (typically via a user creating the invite link or a bot adding the user directly to the server)
    latestDiscordJoinInviterUN      String?
    /// When the user's Discord join data was last updated.
    ///
    /// This value can be used to determine if we need to fetch/re-fetch the user's join method from Discord.
    latestDiscordJoinUpdated        DateTime? @db.Timestamp(0)
}

enum BETTING_STRATEGY {
    UNSET

    PASSIVE
    NORMAL
    AGGRESSIVE

    @@schema("private")
}

model auth_session {
    @@schema("private")
    @@map ("auth_sessions")

    token          String   @id @db.VarChar(45)
    expires        BigInt

    user_snowflake BigInt
    user           user     @relation(fields: [user_snowflake], references: [snowflake])

    created_at     DateTime @default(now()) @db.Timestamp(0)
    updated_at     DateTime @default(now()) @db.Timestamp(0)

    @@index([user_snowflake])
}

model membership {
    @@schema("private")
    @@map ("memberships")

    /// @deprecated
    backendId     String @default(cuid()) @id

    whop_id       String? @unique @db.VarChar(45)
    stripe_id     String? @unique @db.VarChar(32)

    /// Admin who added this membership, if any.
    manual_adder  user?  @relation("manual_adder", fields: [manual_adder_snowflake], references: [snowflake])
    manual_adder_snowflake BigInt? @map("manual-adder")

    /// Email associated with this membership, if any
    email         String? @map("email") @db.Text

    /// RoleFlags to grant to this user
    /// @see RoleFlags
    positive_flags Int
    /// RoleFlags to remove from this user
    ///
    /// Negative flags have the final say! Use sparingly!
    /// @see RoleFlags
    negative_flags Int     @default(0)

    /// When this subscription should be considered no longer active, assuming it's not renewed before then.
    ///
    /// Stored in Unix millis.
    expiration    BigInt
    /// Whether this subscription is active. If false, it will be ignored.
    active        Boolean

    userSnowflake BigInt
    user          user    @relation(fields: [userSnowflake], references: [snowflake])

    @@index([userSnowflake])
    @@index([manual_adder_snowflake], map: "manual-adder")

    updatedAt      DateTime @updatedAt @db.Timestamp(0) @default(now())
    rolesUpdatesAt DateTime @default("1970-01-01T12:00:00Z") @db.Timestamp(0)
}

model votes {
    @@schema("private")

    poll_id        BigInt
    poll           poll @relation(fields: [poll_id], references: [id])

    user_id        BigInt
    user           user @relation(fields: [user_id], references: [snowflake])

    vote           Int

    won            Boolean?

    wager          Int? @db.SmallInt

    @@id([poll_id, user_id])
    @@index([poll_id])
    @@index([user_id])
}
model poll {
    @@schema("private")
    /// Snowflake ID for the giveaway message
    id           BigInt  @id
    /// Snowflake ID for the channel the giveaway message is in
    channel_id   BigInt

    question   String
    options    String[]
    /// The time the poll is scheduled to stop accepting new votes, stored in Unix seconds
    expiration BigInt?
    open       Boolean @default(true)

    votes      votes[]
}

model EVChannel {
    @@schema("public")

    channelId         BigInt @id
    enabled           Boolean @default(false)

    filters           Json?
    pingConfig        Json?
}

model EVAlertEvent {
    @@schema("private")

    id BigInt @id @default(autoincrement())

    alertProvider String

    /// The sport this event will occur in
    sport      String?

    /// The sports league this event will occur in
    league      String?

    /// The game this event will occur in
    game      String

    /// The expected profit from this event, represented as a decimal (e.g. 0.5 = 50%)
    EV      Decimal? @db.Decimal(6, 4)

    /// Odds to hit (TODO: ask AsiaD about what this is), represented as a decimal (e.g. 0.5 = 50%)
    oddsToHit      Decimal? @db.Decimal(6, 4)

    /// The sportsbook sending this event
    sportsbook      String

    /// The time the event is scheduled to occur, represented in Unix seconds
    eventTime      BigInt?

    /// The time our systems received the EV event, represented in Unix seconds
    receivedTime      BigInt

    /// Odds number as provided by the sportsbook (e.g. +100 or -220)
    odds      Int @db.SmallInt

    /// The bet size recommended by the event provider in US Dollars, based on a $1,000 bankroll
    betSizeRecommendationFor1kBankroll      Decimal? @db.Decimal(6, 2)

    /// The type of bet to place (e.g. "Total Points" or "Player Singles" or "Moneyline")
    betType      String

    /// The prediction the bet is making (e.g. "Over 61.5" or "Aaron Judge Over 0.5" or "Nanjing Monkey Kings")
    betPrediction      String

    /// Whether this event passed the filter defined for it and was sent in filtered channels. Possible values are:
    /// * `true` - The event passed the filter and was sent in filtered channels
    /// * `false` - The event did not pass the filter and was not sent in filtered channels
    /// * `null` - The event had no filter to pass; whether it was sent in public channels depends on the configuration of the odds email worker at the time of the event
    passedFilter      Boolean?

    /// Whether this event is included in the spreadsheet
    ///
    /// When the Discord bot starts up, it attempts to add all events that are not already in the spreadsheet to the spreadsheet.
    isInSpreadsheet      Boolean? @default(false)
    @@index([isInSpreadsheet])
}

model Giveaway {
    @@schema("private")

    id                    String @id @default(cuid())

    /// Snowflake ID for the giveaway message
    messageId             BigInt?
    @@unique([messageId])

    /// Snowflake ID for the channel the giveaway message is in
    channelId             BigInt

    name                  String
    description           String?
    karmaCost             BigInt @default(0)
    maxEntriesPerUser     Int? @default(1)
    totalWinnersToChoose  Int @default(1)

    expiration            DateTime?
    open                  Boolean @default(true)
    haveWinnersBeenDrawn  Boolean @default(false)

    userEntries           GiveawayEntriesForUser[]
}

/// Entries for a user in a giveaway. Allows for multiple entries per user, tracked by one record per user.
model GiveawayEntriesForUser {
    @@schema("private")

    giveawayId       String
    giveaway         Giveaway @relation(fields: [giveawayId], references: [id])

    giveawayMessage  BigInt

    userId           BigInt
    user             user @relation(fields: [userId], references: [snowflake])

    won              Boolean?

    entryCount       Int @db.SmallInt

    @@id([giveawayId, userId])
    @@index([giveawayId])
    @@index([giveawayId, won])
    @@index([giveawayMessage])
    @@index([userId])
}
