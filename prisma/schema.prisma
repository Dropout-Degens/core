generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model coupon {
  @@map ("coupons")

  associated_user BigInt?  @map("associated-user") @db.UnsignedBigInt
  user            user?    @relation(fields: [associated_user], references: [snowflake])

  /// The promo code string used for Whop
  ///
  /// Schema:
  ///    ${Snowflake}-${PseudoRandomFillTo40Chars}-${BillingPeriod}-${Duration}-${Amount}
  promo_code      String  @id @unique(map: "promo-code_UNIQUE") @map("promo-code") @db.VarChar(64)

  whop_id         String? @unique(map: "whop-id_UNIQUE") @map("whop-id") @db.VarChar(32)
  stripe_id       String? @unique(map: "stripe-id_UNIQUE") @map("stripe-id") @db.VarChar(32)

  discount_amount Float   @map("discount-amount") @db.Float
  duration        Int     @db.SmallInt
  billing_period  String  @map("billing-period") @db.TinyText
  plan_type       Int     @map("plan-type") @db.TinyInt
  source          String? @db.TinyText

  @@index([associated_user], map: "associated-user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  @@map ("users")

  snowflake                      BigInt  @id @db.UnsignedBigInt
  discord_email                  String? @map("discord-email") @db.Text
  discord_pfp                    String? @map("discord-pfp") @db.Text
  discord_name                   String? @map("discord-name") @db.Text

  discord_access_token           String? @map("discord-access-token") @db.LongText
  discord_access_expiry          BigInt  @default(0) @map("discord-access-expiry") @db.UnsignedBigInt
  discord_refresh_token          String? @map("discord-refresh-token") @db.LongText

  timezone                       String  @default(dbgenerated("(_utf8mb4\\'America/New_York\\')")) @db.Text
  timezone_last_adjusted         BigInt  @default(0) @map("timezone-last-adjusted") @db.UnsignedBigInt
  weekly_reward_last_claimed     String  @default(dbgenerated("(_utf8mb4\\'December 31 1969 20:00 GMT-4\\')")) @map("weekly-reward-last-claimed") @db.LongText
  weekly_reward_streak           Int     @default(0) @map("weekly-reward-streak") @db.UnsignedInt
  weekly_reward_streak_last_best Int     @default(0) @map("weekly-reward-streak-last-best") @db.UnsignedInt

  auth_sessions                  auth_session[]

  memberships                    membership[]
  /// Flattened subscription type. THIS IS A CACHE OF SORTS AND SHOULD BE UPDATED AFTER `memberships` IS MMODIFIED!
  subscription_type              Int     @default(0) @map("subscription-type") @db.UnsignedInt


  /// Record<PurchasablePlan, Record<DiscountSource, number>>
  /// @type { Record<number, Record<string, number>> }
  free_days                      Json?
  coupons                        coupon[]




  karma                          BigInt     @default(0)
  // NOTE: When adding new caps, be sure to run the following SQL to create a reset event. THIS MUST BE DONE IN PRODUCTION TOO!!!
  // CREATE EVENT `reset_NEW_COLUMN` ON SCHEDULE EVERY 1 DAY STARTS `YEAR-MONTH-TOMORROW 05:00:00` DO UPDATE  `users`  SET `NEW_COLUMN` = 0;
  karma_today_from_messages      BigInt     @default(0)
  karma_today_from_reactions     BigInt     @default(0)



  admin_created_memberships membership[] @relation("manual_adder")


  // OLD: Remove these after migration
  /// @deprecated to be removed after migration
  //auth_session_token             String? @unique(map: "auth-session-token_UNIQUE") @map("auth-session-token") @db.VarChar(45)
  /// @deprecated to be removed after migration
  //auth_session_token_expires     BigInt  @default(0) @map("auth-session-token-expires") @db.UnsignedBigInt

  /// @deprecated to be removed after migration
  //whop_membership_id             String? @unique(map: "whop-id_UNIQUE") @map("whop-membership-id") @db.VarChar(45)
  /// @deprecated to be removed after migration
  //whop_email                     String? @map("whop-email") @db.Text

  /// @deprecated to be removed after migration
  //stripe_subscription_id         String? @unique(map: "stripe-subscription-id_UNIQUE") @map("stripe-subscription-id") @db.Char(32)
  /// @deprecated to be removed after migration
  //subscription_expiration        BigInt  @default(0) @map("subscription-expiration") @db.BigInt

  /// @deprecated to be removed after migration
  //discounts                      Json    @default(dbgenerated("(_utf8mb4\\'{}\\')"))
}

model auth_session {
  @@map ("auth_sessions")

  token          String   @unique @db.VarChar(45)
  expires        BigInt   @db.UnsignedBigInt

  user_snowflake BigInt   @db.UnsignedBigInt
  user           user     @relation(fields: [user_snowflake], references: [snowflake])

  created_at     DateTime @default(now()) @db.Timestamp(0)
  updated_at     DateTime @default(now()) @db.Timestamp(0)

  @@index([user_snowflake])
}

model membership {
  @@map ("memberships")

  /// @deprecated
  backendId     Int     @id @default(autoincrement())

  whop_id       String? @unique @db.VarChar(45)
  stripe_id     String? @unique @db.VarChar(32)

  /// Admin who added this membership, if any.
  manual_adder  user?  @relation("manual_adder", fields: [manual_adder_snowflake], references: [snowflake])
  manual_adder_snowflake BigInt? @map("manual-adder") @db.UnsignedBigInt

  /// Email associated with this membership, if any
  email         String? @map("email") @db.Text

  /// RoleFlags to grant to this user
  /// @see RoleFlags
  positive_flags         Int     @db.UnsignedInt
  /// RoleFlags to remove from this user
  ///
  /// Negative flags have the final say! Use sparingly!
  /// @see RoleFlags
  negative_flags         Int     @default(0) @db.UnsignedInt

  /// When this subscription should be considered no longer active if not renewed
  expiration    BigInt  @db.UnsignedBigInt
  /// Whether this subscription is active. If false, it will be ignored.
  active        Boolean

  userSnowflake BigInt  @db.UnsignedBigInt
  user          user    @relation(fields: [userSnowflake], references: [snowflake])

  @@index([userSnowflake])
  @@index([manual_adder_snowflake], map: "manual-adder")
}
